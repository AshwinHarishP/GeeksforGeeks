class Solution:
	def isBipartite(self, V, adj):
		def check(node, col):
		    color[node] = col
		    
		    for i in adj[node]:
		        if color[i] == -1:
		            if check(i, not col) == False:
		                return False
		            
		        elif color[i] == color[node]:
		            return False
		            
		       
		            
		    return True
		
		
		color = [-1 for _ in range(V)]
		
		for i in range(V):
		    if color[i] == -1:
		        if not check(i, 0):
		            return False
		return True            
		



#{ 
 # Driver Code Starts

if __name__ == '__main__':
	T=int(input())
	for i in range(T):
		V, E = map(int, input().strip().split())
		adj = [[] for i in range(V)]
		for i in range(E):
			u, v = map(int, input().strip().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isBipartite(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends

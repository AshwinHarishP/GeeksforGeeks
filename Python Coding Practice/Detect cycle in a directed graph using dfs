#User function Template for python3


class Solution:
    
    #Function to detect cycle in a directed graph.
    def isCyclic(self, V, adj):
        
        def dfsCheck(node):
            vis[node] = 1
            path[node] = 1
            
            # Traverse through adjecent nodes
            for i in adj[node]:
                # If node is not visited
                if not vis[i]:
                    if dfsCheck(i) == True: return True
                
                # if the node is previouly visited
                # but it has to be same path -> to form a cycle
                
                elif path[i]:
                    return True
            
            # Bactracking
            path[node] = 0
            return False
            
            
            
            
        vis = [0 for _ in range(V)]
        path = [0 for _ in range(V)]
        
        for i in range(V):
            if not vis[i]:
                if dfsCheck(i) == True:
                    return True
        return False


#{ 
 # Driver Code Starts
#Initial Template for Python 3

import sys
sys.setrecursionlimit(10**6)
        
if __name__ == '__main__':
    t = int(input())
    for i in range(t):
        V,E = list(map(int, input().strip().split()))
        adj = [[] for i in range(V)]
        for i in range(E):
            a,b = map(int,input().strip().split())
            adj[a].append(b)
        ob = Solution()
        
        if ob.isCyclic(V, adj):
            print(1)
        else:
            print(0)
# } Driver Code Ends
